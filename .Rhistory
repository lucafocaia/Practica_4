x <- pmin(3, pmax(-3, stats::rnorm(50)))
y <- pmin(3, pmax(-3, stats::rnorm(50)))
xhist <- hist(x, breaks = seq(-3,3,0.5), plot = FALSE)
yhist <- hist(y, breaks = seq(-3,3,0.5), plot = FALSE)
top <- max(c(xhist$counts, yhist$counts))
xrange <- c(-3, 3)
yrange <- c(-3, 3)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(3,1), c(1,3), TRUE)
layout.show(nf)
par(mar = c(3,3,1,1))
plot(x, y, xlim = xrange, ylim = yrange, xlab = "", ylab = "")
par(mar = c(0,3,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0)
par(mar = c(3,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top), space = 0, horiz = TRUE)
x<-array(rnorm(100),c(100,4)) #creo los datos a graficar. Replico los 100 datos en
4 columnas
titulo<-c("Figura1","Figura 2","Figura 3","Figura 4") #Titulo de cada grafico
individual
par(fig=c(0,1,0,1), # Region de la Figura dentro de la region display (x1,x2,y1,y2)
omi=c(0.05,0.15,0,0.05), # margenes globales en pulgadas (inferior, izquierdo,
superior, derecho)
mai=c(0.6,0.6,0.6,0.5)) # margenes del subplot en pulgadas (inf izq, superior,
derecho)
layout(matrix(1:4, 2, 2, byrow= TRUE))
for(k in 1:4){
plot(x[,k], type="l", col="darkblue", lwd=2,
ylab="variable",xlab="tiempo",xlim=c(0,100),ylim=c(-3,3) )
title(main=(titulo[k]), line=1, cex.main=1.2)
abline(v=20,lty=2,col="grey"); abline(v=40,lty=2,col="grey");
abline(v=60,lty=2,col="grey")
}
curve(sin, -2*pi, 2*pi, xname = "t")
curve(tan, xname = "t", add = NA, main =
"curve(tan) --> same x-scale as previous plot")
require(grDevices) # librería para colores
tN <- table(Ni <- stats::rpois(100, lambda = 5))
r <- barplot(tN, col = rainbow(20))
lines(r, tN, type = "h", col = "red", lwd = 2)
x<-array(rnorm(100),c(100,4))
par(fig=c(0,1,0,1), # Region de la figura en el display device (x1,x2,y1,y2)
omi=c(0.05,0.9,0,0.3)) # margenes globales en pulgadas (abajo, izq, sup, derecha)
plot(x[,1], type="l", col="darkblue", lwd=3, ylab="variable 1",xlab="Tiempo", xlim=c(0,100), ylim
=c(-3,3) )
title(main=("Grafico en dos ejes"), font=2, line=1, cex.main=1.2)
par(new=TRUE) #para graficar sobre la figura anterior
barplot(x[,3]*x[,1], col="darkred",lwd=2, yaxt="n", ylab="",xaxt="n", xlab="",cex.axis=1.0 )
axis(4, cex.axis=1.0) ## Valores en el eje izquierdo
mtext("variable 2", side=4, line=2, col="darkred", cex=1.0) ## Texto para el eje derecho
x <- rnorm(100)
x <- rnorm(100)
boxplot(x)
x <- array(rnorm(100), c(100,5))
boxplot(x)
boxplot(x, notch = T)
title(main = "notch = TRUE")
x <- c(1:5)
outer(x,x)
x <- -6:16
op <- par(mfrow = c(2, 2),mai=c(0.4,0.4,0.4,0.4))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge", vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1, xlab = quote(x[1]), ylab = quote(x[2]))
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple", main = "20 levels; \"simple\"
labelling method",cex.main=0.8)
rx <- range(x <- 10*1:nrow(volcano))
ry <- range(y <- 10*1:ncol(volcano))
ry <- ry + c(-1, 1) * (diff(rx) - diff(ry))/2
tcol <- terrain.colors(12)
par(opar); opar <- par(pty = "s", bg = "lightcyan")
plot(x = 0, y = 0, type = "n", xlim = rx, ylim = ry, xlab = "", ylab = "")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = tcol[8], border = "red")
contour(x, y, volcano, col = tcol[2], lty = "solid", add = TRUE, vfont = c("sans serif", "plain"))
title("A Topographic Map of Maunga Whau", font = 4)
abline(h = 200*0:4, v = 200*0:4, col = "lightgray", lty = 2, lwd = 0.1)
require(grDevices) # for colours
filled.contour(volcano, color = terrain.colors, asp = 1)
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
filled.contour(x, y, volcano, color = terrain.colors,
plot.title = title(main = "The Topography of Maunga Whau",
xlab = "Meters North", ylab = "Meters West"),
plot.axes = { axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100)) },
key.title = title(main = "Height\n(meters)"),
key.axes = axis(4, seq(90, 190, by = 10)))
mtext(paste("filled.contour(.) from", R.version.string),
side = 1, line = 4, adj = 1, cex = .66)
require(plot3D)
install.packages(plot3D)
install.packages("plot3D")
require(plot3D)
X=matrix(seq(-8,8,by=0.5),ncol=33,nrow=33)
Y=matrix(seq(-8,8,by=0.5),ncol=33,nrow=33,byrow=T)
X=matrix(seq(-8,8,by=0.5),ncol=33,nrow=33)
Y=matrix(seq(-8,8,by=0.5),ncol=33,nrow=33,byrow=T)
#???tra forma de generar los dos renglones anteriores es usando la funcion mesh
MM<-mesh(seq(-8,8,by=0.5),seq(-8,8,by=0.5))
class(MM)
X<-MM$x ; Y<-MM$y
R = sqrt(X^2 + Y^2) + .Machine$double.eps
Z = sin(R)/R
surf3D(X,Y,Z,facets=F)
surf3D(X,Y,Z,facets=NA)
surf3D(X,Y,Z,facets=F,border = "black",colkey=F)
surf3D(X,Y,Z)
surf3D(X,Y,Z,phi=40,theta = 20)
surf3D(X,Y,Z,phi=40,theta = 60)
surf3D(X,Y,Z,colkey=F)
surf3D(X,Y,Z,colvar=Y,colkey=F,ltheta=20,bty="b2",phi=0)
surf3D(X,Y,Z,colvar=X,colkey=F,bty="b")
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,shade=0.5)
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,border = "black", xlim = range(X)*0.8,
ylim = range(Y)*0.8, zlim = range(Z)*0.8)
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,border = "black", xlim = range(X)*0.8,
ylim = range(Y)*0.8, zlim = range(Z)*1.2)
surf3D(X,Y,Z,box=FALSE,theta=60,col = "lightblue", shade = 0.9)
for (angle in seq(0, 360, by = 10)) plotdev(theta = angle)
surf3D(X,Y,Z,facets=F)
surf3D(X,Y,Z,facets=NA)
surf3D(X,Y,Z,facets=F,border = "black",colkey=F)
surf3D(X,Y,Z)
surf3D(X,Y,Z,phi=40,theta = 20)
surf3D(X,Y,Z,phi=40,theta = 60)
surf3D(X,Y,Z,colkey=F)
surf3D(X,Y,Z,colvar=Y,colkey=F,ltheta=20,bty="b2",phi=0)
surf3D(X,Y,Z,colvar=X,colkey=F,bty="b")
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,shade=0.5)
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,border = "black", xlim = range(X)*0.8,
ylim = range(Y)*0.8, zlim = range(Z)*0.8)
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,border = "black", xlim = range(X)*0.8,
ylim = range(Y)*0.8, zlim = range(Z)*1.2)
surf3D(X,Y,Z,box=FALSE,theta=60,col = "lightblue", shade = 0.9)
for (angle in seq(0, 360, by = 10)) plotdev(theta = angle)
#Con la flecha en plots ir hacia atras para ver los graficos
#Con la flecha en plots ir hacia atras para ver los graficos
#generados con el for
plot(x,y,type="l",xlab=“x",ylab=“y", main="Parabola y=x^2", col="red")
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
x <- seq(2,100,2)
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
jpeg("Grafico.jpg")
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
x<-c(1:100)
y<-c(1:200)
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
y<-c(1:100)
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
dev.off()
example(rect)
jpeg(file = "myplot.jpeg")
example(rect)
dev.off()
setwd("~/Documentos/Labo_Luca")
jpeg(file = "myplot.jpeg")
example(rect)
dev.off()
jpeg(file = "myplot%02d.jpeg")
example(rect)
dev.off()
#Esta funcion genera graficos con distintos simbolos para usar con POINTS
pchShow <-
function(extras = c("*",".", "o","O","0","+","-","|","%","#"),
cex = 3, ## good for both .Device=="postscript" and "x11"
col = "red3", bg = "gold", coltext = "brown", cextext = 1.2,
main = paste("plot symbols :  points (...  pch = *, cex =",
cex,")"))
#Esta funcion genera graficos con distintos simbolos para usar con POINTS
pchShow <-
function(extras = c("*",".", "o","O","0","+","-","|","%","#"),
cex = 3, ## good for both .Device=="postscript" and "x11"
col = "red3", bg = "gold", coltext = "brown", cextext = 1.2,
main = paste("plot symbols :  points (...  pch = *, cex =",
cex,")"))
{
nex <- length(extras)
np  <- 26 + nex
ipch <- 0:(np-1)
k <- floor(sqrt(np))
dd <- c(-1,1)/2
rx <- dd + range(ix <- ipch %/% k)
ry <- dd + range(iy <- 3 + (k-1)- ipch %% k)
pch <- as.list(ipch) # list with integers & strings
if(nex > 0) pch[26+ 1:nex] <- as.list(extras)
plot(rx, ry, type = "n", axes  =  FALSE, xlab = "", ylab = "", main = main)
abline(v = ix, h = iy, col = "lightgray", lty = "dotted")
for(i in 1:np) {
pc <- pch[[i]]
## 'col' symbols with a 'bg'-colored interior (where available) :
points(ix[i], iy[i], pch = pc, col = col, bg = bg, cex = cex)
if(cextext > 0)
text(ix[i] - 0.3, iy[i], pc, col = coltext, cex = cextext)
}
}
pchShow()
pchShow(c("o","O","0"), cex = 2.5)
pchShow(NULL, cex = 4, cextext = 0, main = NULL)
pchShow()
pchShow(c("o","O","0"), cex = 2.5)
pchShow(NULL, cex = 4, cextext = 0, main = NULL)
op <- par(bg = "light green")
x <- seq(0, 2*pi, len = 51)
plot(x, sin(x), type = "o", pch = 24, bg="cyan",col = "blue", cex = .8)
z <- outer(x,y,"+")
image.plot(x,y,z)
y <- c(1:15)
z <- outer(x,y,"+")
image.plot(x,y,z)
require(fields)
install.packages("fields")
require(fields)
x <- c(1:10)
y <- c(1:15)
z <- outer(x,y,"+")
image.plot(x,y,z)
obj<- list( x=x,y=y,z=z)
image.plot(obj, legend.lab="Sverdrups")
image.plot(obj, legend.lab="Sverdrups")
points( 5:12, 5:12, pch="X", cex=3)
x <- c(1:10)
y <- c(1:15)
z <- outer(x,y,"+")
image.plot(x,y,z)
obj<- list( x=x,y=y,z=z)
image.plot(obj, legend.lab="Sverdrups")
points( 5:12, 5:12, pch="X", cex=3)
setwd("~/Documentos/Labo_Luca/Practica_4")
require(fields)
require(ncdf4)
#Cargo las librerias
require(ncdf4)
